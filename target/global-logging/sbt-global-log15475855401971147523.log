[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\m158\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\m158\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Eclipse Foundation Java 11.0.12)
[debug]       Load.loadUnit: plugins took 102.1889ms
[debug]       Load.loadUnit: defsScala took 0.3615ms
[debug] [Loading] Scanning directory C:\Users\m158\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\m158\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.5452 ms
[debug]           Load.resolveProject(global-plugins) took 57.9113ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\m158\.sbt\1.0\plugins, plugins: List(<none>))) took 94.8497ms
[debug] [Loading] Done in C:\Users\m158\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 115.1723ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3283ms
[debug]     Load.loadUnit(file:/C:/Users/m158/.sbt/1.0/plugins/, ...) took 229.1513ms
[debug]   Load.apply: load took 392.102ms
[debug]   Load.apply: resolveProjects took 5.5522ms
[debug]   Load.apply: finalTransforms took 64.1914ms
[debug]   Load.apply: config.delegates took 7.4675ms
[debug]   Load.apply: Def.make(settings)... took 454.3109ms
[debug]   Load.apply: structureIndex took 97.7887ms
[debug]   Load.apply: mkStreams took 1.8679ms
[info] loading global plugins from C:\Users\m158\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4885.6851ms
[debug]           Load.loadUnit: plugins took 31.6016ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\m158\IdeaProjects\ScalaPractise\project
[debug]             Load.loadUnit: mkEval took 8.7145ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\m158\IdeaProjects\ScalaPractise\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7171 ms
[info] loading settings for project scalapractise-build from idea.sbt ...
[debug]               Load.resolveProject(scalapractise-build) took 2.6979ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalapractise-build, base: C:\Users\m158\IdeaProjects\ScalaPractise\project, plugins: List(<none>))) took 4.9533ms
[debug] [Loading] Done in C:\Users\m158\IdeaProjects\ScalaPractise\project, returning: (scalapractise-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2511.2554ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.3365ms
[debug]         Load.loadUnit(file:/C:/Users/m158/IdeaProjects/ScalaPractise/project/, ...) took 2549.3798ms
[debug]       Load.apply: load took 2550.7665ms
[debug]       Load.apply: resolveProjects took 0.1215ms
[debug]       Load.apply: finalTransforms took 7.2736ms
[debug]       Load.apply: config.delegates took 0.3051ms
[debug]       Load.apply: Def.make(settings)... took 114.551ms
[debug]       Load.apply: structureIndex took 25.3038ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\m158\IdeaProjects\ScalaPractise\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3201.8825ms
[debug]     Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\m158\IdeaProjects\ScalaPractise
[debug]       Load.loadUnit: mkEval took 0.3077ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7048 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 39.5637ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\m158\IdeaProjects\ScalaPractise, plugins: List(<none>))) took 44.7365ms
[debug] [Loading] Done in C:\Users\m158\IdeaProjects\ScalaPractise, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1921.0847ms
[debug]     Load.loadUnit: cleanEvalClasses took 22.695ms
[debug]   Load.loadUnit(file:/C:/Users/m158/IdeaProjects/ScalaPractise/, ...) took 5146.3915ms
[debug] Load.apply: load took 5148.0269ms
[debug] Load.apply: resolveProjects took 0.101ms
[debug] Load.apply: finalTransforms took 25.2086ms
[debug] Load.apply: config.delegates took 0.5868ms
[debug] Load.apply: Def.make(settings)... took 127.7844ms
[debug] Load.apply: structureIndex took 20.7876ms
[debug] Load.apply: mkStreams took 0.0032ms
[info] set current project to ScalaPractise (in build file:/C:/Users/m158/IdeaProjects/ScalaPractise/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63007 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63007, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaPractise (in build file:/C:/Users/m158/IdeaProjects/ScalaPractise/)
[debug] > Exec(idea-shell, None, None)
